/// <reference types="cordova-plugin-ionic" />
import { App, CheckAndApplyResponse, DeployConfig, ProgressFunc } from '../../definitions';
export interface DeployV5API {
    checkForUpdate: IDeployPluginAPI['checkForUpdate'];
}
/**
 * Interact with Ionic Deploy using these functions.
 * @tutorial
 * To see examples of Pro.deploy, please see our docs: https://ionicframework.com/docs/pro/deploy/.
 */
export declare class Deploy implements DeployV5API {
    private app;
    constructor(app: App);
    /**
     * @description Updates the Deploy config.
     *
     * @param config Settings for your app: { 'appId': 'abc123', 'channel': 'Channel' }
     *
     * @tutorial
     * To see examples of Pro.deploy.init(), please see our docs: https://ionicframework.com/docs/pro/deploy/.
     *
     * @returns Resolved when done, no response.
     */
    init(config: DeployConfig): Promise<any>;
    /**
     * @description Returns the current settings of the Deploy plugin.
     *
     * @tutorial
     * To see examples of Pro.deploy.info(), please see our docs: https://ionicframework.com/docs/pro/deploy/.
     *
     * @returns An ISnapshotInfo object.
     */
    info(): Promise<ISnapshotInfo | undefined>;
    /**
     * @description Checks to see if an update is available to be downloaded.
     *
     * @tutorial
     * To see examples of Pro.deploy.check(), please see our docs: https://ionicframework.com/docs/pro/deploy/.
     *
     * @return {boolean} whether there's an update available
     */
    check(): Promise<boolean>;
    /**
     * @description Downloads an update if one is present.
     *
     * @param progress A function that is called with updated percentages of download completion.
     *
     * @tutorial
     * To see examples of Pro.deploy.download(), please see our docs: https://ionicframework.com/docs/pro/deploy/.
     *
     * @return {Promise} resolves when completed
     */
    download(progress?: ProgressFunc): Promise<boolean>;
    /**
     * @deprecated Download and extract are now handled in a single step.
     *
     * @description Extracts a previously downloaded version of code so it can be used.
     *
     * @param progress A function that is called with updated (integer) percentages of extract completion.
     *
     * @tutorial
     * To see examples of Pro.deploy.extract(), please see our docs: https://ionicframework.com/docs/pro/deploy/.
     *
     * @return {Promise} resolves when completed
     */
    extract(progress?: ProgressFunc): Promise<boolean>;
    /**
     * @description Reload the app with the latest downloaded version.
     *
     * @tutorial
     * To see examples of Pro.deploy.redirect(), please see our docs: https://ionicframework.com/docs/pro/deploy/.
     *
     * @return {Promise} resolves when completed
     */
    redirect(): Promise<boolean>;
    /**
     * @description Performs a check and entire download/unzip/redirect process for you.
     *
     * @param redirect True/False will determine whether or not we redirect to the new version immediately upon finishing.
     *
     * @param downloadProgressFunc A function that is called with updated percentages of download completion.
     *
     * @param extractProgressFunc A function that is called with updated percentages of extract completion.
     *
     * @tutorial
     * To see examples of Pro.deploy.redirect(), please see our docs: https://ionicframework.com/docs/pro/deploy/.
     *
     * @return {CheckAndApplyResponse}
     */
    checkAndApply(redirect?: boolean, progress?: ProgressFunc): Promise<CheckAndApplyResponse>;
    /**
     * @description Returns a list of Deploy versions that are currently downloaded.
     *
     * @tutorial
     * To see examples of Pro.deploy.getVersions(), please see our docs: https://ionicframework.com/docs/pro/deploy/.
     *
     * @return A list of Deploy download objects that are currently on the device.
     */
    getVersions(): Promise<ISnapshotInfo[]>;
    /**
     * @description Deletes a version of code off of the device to free up space.
     *
     * @param uuid The uuid of the Version you'd like to delete, normally from Pro.deploy.getVersions().
     *
     * @tutorial
     * To see examples of Pro.deploy.deleteVersion(), please see our docs: https://ionicframework.com/docs/pro/deploy/.
     *
     * @return {Promise} resolves when completed
     */
    deleteVersion(uuid: string): Promise<boolean>;
    /**
     * @description Update the default configuration for the plugin on the current device. The new configuration will be persisted across app close and binary updates.
     *
     * @param config The new configuration for the plugin on this device.
     */
    configure(config: IDeployConfig): Promise<void>;
    /**
     * @description Check for available updates for the currently configured app id and channel.
     */
    checkForUpdate(): Promise<CheckDeviceResponse>;
    /**
     * @description Remove the files specific to a snapshot from the device.
     *
     * @param version The versionId
     */
    deleteVersionById(versionId: string): Promise<boolean>;
    /**
     * @description Download the new files from an available update found by the checkForUpdate method and prepare the update.
     *
     * @param progress A progress callback function which will be called with a number representing the percent of completion of the download and prepare.
     */
    downloadUpdate(progress?: CallbackFunction<number>): Promise<boolean>;
    /**
     * @description Extract a downloaded bundle of updated files.
     *
     * @param progress A progress callback function which will be called with a number representing the percent of completion of the extract.
     */
    extractUpdate(progress?: CallbackFunction<number>): Promise<boolean>;
    /**
     * @description Get a list of the snapshots available on the device.
     */
    getAvailableVersions(): Promise<ISnapshotInfo[]>;
    /**
     * @description Get info about the currently deployed update.
     */
    getCurrentVersion(): Promise<ISnapshotInfo | undefined>;
    /**
     * @description Reload the app if a more recent version of the app is available.
     */
    reloadApp(): Promise<boolean>;
    /**
     * @description Check for an update, download it, and apply it in one step.
     *
     * @param syncOptions (Optional) Application update overrides.
     */
    sync(syncOptions: ISyncOptions): Promise<ISnapshotInfo | undefined>;
}
