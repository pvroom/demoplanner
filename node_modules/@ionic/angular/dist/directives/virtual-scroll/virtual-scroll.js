import { ChangeDetectorRef, ContentChild, Directive, ElementRef } from '@angular/core';
import { VirtualItem } from './virtual-item';
import { VirtualHeader } from './virtual-header';
import { VirtualFooter } from './virtual-footer';
import { VirtualContext } from './virtual-utils';
export class VirtualScroll {
    constructor(el, cd) {
        this.el = el;
        this.cd = cd;
        this.el.nativeElement.itemRender = this.itemRender.bind(this);
    }
    itemRender(el, cell, index) {
        if (!el) {
            const node = this.itmTmp.viewContainer.createEmbeddedView(this.getComponent(cell.type), new VirtualContext(null, null, null), index);
            el = getElement(node);
            el['$ionView'] = node;
        }
        const node = el['$ionView'];
        const ctx = node.context;
        ctx.$implicit = cell.value;
        ctx.index = cell.index;
        node.detectChanges();
        return el;
    }
    getComponent(type) {
        switch (type) {
            case 0: return this.itmTmp.templateRef;
            case 1: return this.hdrTmp.templateRef;
            case 2: return this.ftrTmp.templateRef;
        }
        return null;
    }
}
VirtualScroll.decorators = [
    { type: Directive, args: [{
                selector: 'ion-virtual-scroll'
            },] },
];
/** @nocollapse */
VirtualScroll.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
VirtualScroll.propDecorators = {
    "itmTmp": [{ type: ContentChild, args: [VirtualItem,] },],
    "hdrTmp": [{ type: ContentChild, args: [VirtualHeader,] },],
    "ftrTmp": [{ type: ContentChild, args: [VirtualFooter,] },],
};
function getElement(view) {
    const rootNodes = view.rootNodes;
    for (let i = 0; i < rootNodes.length; i++) {
        if (rootNodes[i].nodeType === 1) {
            return rootNodes[i];
        }
    }
    return null;
}
