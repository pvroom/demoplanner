import { Directive as NgDirective, ElementRef, EventEmitter as NgEventEmitter, Input as NgInput, Output as NgOutput } from '@angular/core';
export function outputs(instance, events) {
    events.forEach(eventName => {
        instance[eventName] = new NgEventEmitter();
    });
}
export function inputs(instance, el, props) {
    props.forEach(propName => {
        Object.defineProperty(instance, propName, {
            get: () => el.nativeElement[propName], set: (val) => el.nativeElement[propName] = val
        });
    });
}
const accept = 'accept', activated = 'activated', active = 'active', allowEmptySelection = 'allowEmptySelection', animated = 'animated', autoHide = 'autoHide', autocapitalize = 'autocapitalize', autocomplete = 'autocomplete', autocorrect = 'autocorrect', autofocus = 'autofocus', btnId = 'btnId', button = 'button', buttonType = 'buttonType', cancelButtonText = 'cancelButtonText', cancelText = 'cancelText', checked = 'checked', clearInput = 'clearInput', clearOnEdit = 'clearOnEdit', closeDuration = 'closeDuration', color = 'color', cols = 'cols', component = 'component', componentProps = 'componentProps', contentId = 'contentId', dayNames = 'dayNames', dayShortNames = 'dayShortNames', dayValues = 'dayValues', debounce = 'debounce', defaultHref = 'defaultHref', delegate = 'delegate', detail = 'detail', disabled = 'disabled', displayFormat = 'displayFormat', doneText = 'doneText', dualKnobs = 'dualKnobs', duration = 'duration', edge = 'edge', expand = 'expand', expandable = 'expandable', fill = 'fill', fixed = 'fixed', floating = 'floating', forceOverscroll = 'forceOverscroll', fullscreen = 'fullscreen', goBack = 'goBack', header = 'header', horizontal = 'horizontal', hourValues = 'hourValues', href = 'href', icon = 'icon', inputmode = 'inputmode', interfaceOptions = 'interfaceOptions', ionBlur = 'ionBlur', ionCancel = 'ionCancel', ionChange = 'ionChange', ionClear = 'ionClear', ionClick = 'ionClick', ionClose = 'ionClose', ionDrag = 'ionDrag', ionFocus = 'ionFocus', ionInfinite = 'ionInfinite', ionInput = 'ionInput', ionInputDidLoad = 'ionInputDidLoad', ionInputDidUnload = 'ionInputDidUnload', ionMenuChange = 'ionMenuChange', ionNavDidChange = 'ionNavDidChange', ionNavWillChange = 'ionNavWillChange', ionOpen = 'ionOpen', ionPull = 'ionPull', ionRadioDidLoad = 'ionRadioDidLoad', ionRadioDidUnload = 'ionRadioDidUnload', ionRefresh = 'ionRefresh', ionScroll = 'ionScroll', ionScrollEnd = 'ionScrollEnd', ionScrollStart = 'ionScrollStart', ionSelect = 'ionSelect', ionSelectOptionDidLoad = 'ionSelectOptionDidLoad', ionSelectOptionDidUnload = 'ionSelectOptionDidUnload', ionSlideDidChange = 'ionSlideDidChange', ionSlideDrag = 'ionSlideDrag', ionSlideNextEnd = 'ionSlideNextEnd', ionSlideNextStart = 'ionSlideNextStart', ionSlidePrevEnd = 'ionSlidePrevEnd', ionSlidePrevStart = 'ionSlidePrevStart', ionSlideReachEnd = 'ionSlideReachEnd', ionSlideReachStart = 'ionSlideReachStart', ionSlideTouchEnd = 'ionSlideTouchEnd', ionSlideTouchStart = 'ionSlideTouchStart', ionSlideTransitionEnd = 'ionSlideTransitionEnd', ionSlideTransitionStart = 'ionSlideTransitionStart', ionSlideWillChange = 'ionSlideWillChange', ionSplitPaneVisible = 'ionSplitPaneVisible', ionStart = 'ionStart', ionStyle = 'ionStyle', ionSwipe = 'ionSwipe', loadingSpinner = 'loadingSpinner', loadingText = 'loadingText', max = 'max', maxEdgeStart = 'maxEdgeStart', maxlength = 'maxlength', mediaQuery = 'mediaQuery', menu = 'menu', menuId = 'menuId', message = 'message', min = 'min', minlength = 'minlength', minuteValues = 'minuteValues', mode = 'mode', monthNames = 'monthNames', monthShortNames = 'monthShortNames', monthValues = 'monthValues', multiple = 'multiple', name = 'name', okText = 'okText', options = 'options', or = 'or', orientation = 'orientation', pager = 'pager', pattern = 'pattern', paused = 'paused', persistent = 'persistent', pickerFormat = 'pickerFormat', pickerOptions = 'pickerOptions', pin = 'pin', placeholder = 'placeholder', platform = 'platform', position = 'position', pullMax = 'pullMax', pullMin = 'pullMin', pullingIcon = 'pullingIcon', pullingText = 'pullingText', readonly = 'readonly', refreshingSpinner = 'refreshingSpinner', refreshingText = 'refreshingText', required = 'required', results = 'results', root = 'root', rootParams = 'rootParams', round = 'round', rows = 'rows', scrollEnabled = 'scrollEnabled', scrollEvents = 'scrollEvents', scrollable = 'scrollable', selected = 'selected', selectedText = 'selectedText', show = 'show', showCancelButton = 'showCancelButton', side = 'side', size = 'size', snapbackDuration = 'snapbackDuration', snaps = 'snaps', spellcheck = 'spellcheck', stacked = 'stacked', step = 'step', strong = 'strong', subHeader = 'subHeader', swipeBackEnabled = 'swipeBackEnabled', swipeEnabled = 'swipeEnabled', tabBadge = 'tabBadge', tabBadgeStyle = 'tabBadgeStyle', tabIcon = 'tabIcon', tabTitle = 'tabTitle', tabbarHidden = 'tabbarHidden', tabbarHighlight = 'tabbarHighlight', tabbarLayout = 'tabbarLayout', tabbarPlacement = 'tabbarPlacement', tabsHideOnSubPages = 'tabsHideOnSubPages', text = 'text', threshold = 'threshold', toggleActive = 'toggleActive', translucent = 'translucent', type = 'type', url = 'url', useRouter = 'useRouter', useTapClick = 'useTapClick', value = 'value', vertical = 'vertical', when = 'when', width = 'width', wrap = 'wrap', yearValues = 'yearValues';
export class App {
}
App.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-app' },] },
];
/** @nocollapse */
App.ctorParameters = () => [];
export class Avatar {
}
Avatar.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-avatar' },] },
];
/** @nocollapse */
Avatar.ctorParameters = () => [];
export class BackButton {
    constructor(el) {
        inputs(this, el, [mode, text, icon, defaultHref]);
    }
}
BackButton.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-back-button' },] },
];
/** @nocollapse */
BackButton.ctorParameters = () => [
    { type: ElementRef, },
];
BackButton.propDecorators = {
    "mode": [{ type: NgInput },],
    "text": [{ type: NgInput },],
    "icon": [{ type: NgInput },],
    "defaultHref": [{ type: NgInput },],
};
export class Badge {
    constructor(el) {
        inputs(this, el, [color, mode]);
    }
}
Badge.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-badge' },] },
];
/** @nocollapse */
Badge.ctorParameters = () => [
    { type: ElementRef, },
];
Badge.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
};
export class Button {
    constructor(el) {
        inputs(this, el, [type, href, buttonType, size, disabled, fill, round, expand, strong, color, mode, goBack]);
        outputs(this, [ionFocus, ionBlur]);
    }
}
Button.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-button' },] },
];
/** @nocollapse */
Button.ctorParameters = () => [
    { type: ElementRef, },
];
Button.propDecorators = {
    "type": [{ type: NgInput },],
    "href": [{ type: NgInput },],
    "buttonType": [{ type: NgInput },],
    "size": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "fill": [{ type: NgInput },],
    "round": [{ type: NgInput },],
    "expand": [{ type: NgInput },],
    "strong": [{ type: NgInput },],
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "goBack": [{ type: NgInput },],
    "ionFocus": [{ type: NgOutput },],
    "ionBlur": [{ type: NgOutput },],
};
export class Buttons {
}
Buttons.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-buttons' },] },
];
/** @nocollapse */
Buttons.ctorParameters = () => [];
export class Card {
    constructor(el) {
        inputs(this, el, [color, mode]);
    }
}
Card.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-card' },] },
];
/** @nocollapse */
Card.ctorParameters = () => [
    { type: ElementRef, },
];
Card.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
};
export class CardContent {
    constructor(el) {
        inputs(this, el, [color, mode]);
    }
}
CardContent.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-card-content' },] },
];
/** @nocollapse */
CardContent.ctorParameters = () => [
    { type: ElementRef, },
];
CardContent.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
};
export class CardHeader {
    constructor(el) {
        inputs(this, el, [color, mode, translucent]);
    }
}
CardHeader.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-card-header' },] },
];
/** @nocollapse */
CardHeader.ctorParameters = () => [
    { type: ElementRef, },
];
CardHeader.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "translucent": [{ type: NgInput },],
};
export class CardSubtitle {
    constructor(el) {
        inputs(this, el, [color, mode]);
    }
}
CardSubtitle.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-card-subtitle' },] },
];
/** @nocollapse */
CardSubtitle.ctorParameters = () => [
    { type: ElementRef, },
];
CardSubtitle.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
};
export class CardTitle {
    constructor(el) {
        inputs(this, el, [color, mode]);
    }
}
CardTitle.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-card-title' },] },
];
/** @nocollapse */
CardTitle.ctorParameters = () => [
    { type: ElementRef, },
];
CardTitle.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
};
export class Checkbox {
    constructor(el) {
        inputs(this, el, [color, mode, name, checked, disabled, value]);
        outputs(this, [ionChange, ionFocus, ionBlur, ionStyle]);
    }
}
Checkbox.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-checkbox' },] },
];
/** @nocollapse */
Checkbox.ctorParameters = () => [
    { type: ElementRef, },
];
Checkbox.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "name": [{ type: NgInput },],
    "checked": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionChange": [{ type: NgOutput },],
    "ionFocus": [{ type: NgOutput },],
    "ionBlur": [{ type: NgOutput },],
    "ionStyle": [{ type: NgOutput },],
};
export class Chip {
    constructor(el) {
        inputs(this, el, [color, mode]);
    }
}
Chip.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-chip' },] },
];
/** @nocollapse */
Chip.ctorParameters = () => [
    { type: ElementRef, },
];
Chip.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
};
export class ChipButton {
    constructor(el) {
        inputs(this, el, [color, mode, disabled, fill, href]);
    }
}
ChipButton.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-chip-button' },] },
];
/** @nocollapse */
ChipButton.ctorParameters = () => [
    { type: ElementRef, },
];
ChipButton.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "fill": [{ type: NgInput },],
    "href": [{ type: NgInput },],
};
export class Col {
}
Col.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-col' },] },
];
/** @nocollapse */
Col.ctorParameters = () => [];
export class Content {
    constructor(el) {
        inputs(this, el, [fullscreen, forceOverscroll, scrollEnabled, scrollEvents]);
    }
}
Content.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-content' },] },
];
/** @nocollapse */
Content.ctorParameters = () => [
    { type: ElementRef, },
];
Content.propDecorators = {
    "fullscreen": [{ type: NgInput },],
    "forceOverscroll": [{ type: NgInput },],
    "scrollEnabled": [{ type: NgInput },],
    "scrollEvents": [{ type: NgInput },],
};
export class Datetime {
    constructor(el) {
        inputs(this, el, [disabled, min, max, displayFormat, pickerFormat, cancelText, doneText, yearValues, monthValues, dayValues, hourValues, minuteValues, monthNames, monthShortNames, dayNames, dayShortNames, pickerOptions, placeholder, value]);
        outputs(this, [ionCancel, ionStyle]);
    }
}
Datetime.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-datetime' },] },
];
/** @nocollapse */
Datetime.ctorParameters = () => [
    { type: ElementRef, },
];
Datetime.propDecorators = {
    "disabled": [{ type: NgInput },],
    "min": [{ type: NgInput },],
    "max": [{ type: NgInput },],
    "displayFormat": [{ type: NgInput },],
    "pickerFormat": [{ type: NgInput },],
    "cancelText": [{ type: NgInput },],
    "doneText": [{ type: NgInput },],
    "yearValues": [{ type: NgInput },],
    "monthValues": [{ type: NgInput },],
    "dayValues": [{ type: NgInput },],
    "hourValues": [{ type: NgInput },],
    "minuteValues": [{ type: NgInput },],
    "monthNames": [{ type: NgInput },],
    "monthShortNames": [{ type: NgInput },],
    "dayNames": [{ type: NgInput },],
    "dayShortNames": [{ type: NgInput },],
    "pickerOptions": [{ type: NgInput },],
    "placeholder": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionCancel": [{ type: NgOutput },],
    "ionStyle": [{ type: NgOutput },],
};
export class Fab {
    constructor(el) {
        inputs(this, el, [horizontal, vertical, edge]);
    }
}
Fab.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-fab' },] },
];
/** @nocollapse */
Fab.ctorParameters = () => [
    { type: ElementRef, },
];
Fab.propDecorators = {
    "horizontal": [{ type: NgInput },],
    "vertical": [{ type: NgInput },],
    "edge": [{ type: NgInput },],
};
export class FabButton {
    constructor(el) {
        inputs(this, el, [color, mode, activated, disabled, href, translucent, toggleActive, show]);
    }
}
FabButton.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-fab-button' },] },
];
/** @nocollapse */
FabButton.ctorParameters = () => [
    { type: ElementRef, },
];
FabButton.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "activated": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "href": [{ type: NgInput },],
    "translucent": [{ type: NgInput },],
    "toggleActive": [{ type: NgInput },],
    "show": [{ type: NgInput },],
};
export class FabList {
    constructor(el) {
        inputs(this, el, [activated, side]);
    }
}
FabList.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-fab-list' },] },
];
/** @nocollapse */
FabList.ctorParameters = () => [
    { type: ElementRef, },
];
FabList.propDecorators = {
    "activated": [{ type: NgInput },],
    "side": [{ type: NgInput },],
};
export class Footer {
    constructor(el) {
        inputs(this, el, [translucent]);
    }
}
Footer.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-footer' },] },
];
/** @nocollapse */
Footer.ctorParameters = () => [
    { type: ElementRef, },
];
Footer.propDecorators = {
    "translucent": [{ type: NgInput },],
};
export class Grid {
}
Grid.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-grid' },] },
];
/** @nocollapse */
Grid.ctorParameters = () => [];
export class Header {
    constructor(el) {
        inputs(this, el, [translucent]);
    }
}
Header.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-header' },] },
];
/** @nocollapse */
Header.ctorParameters = () => [
    { type: ElementRef, },
];
Header.propDecorators = {
    "translucent": [{ type: NgInput },],
};
export class HideWhen {
    constructor(el) {
        inputs(this, el, [orientation, mediaQuery, size, mode, platform, or]);
    }
}
HideWhen.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-hide-when' },] },
];
/** @nocollapse */
HideWhen.ctorParameters = () => [
    { type: ElementRef, },
];
HideWhen.propDecorators = {
    "orientation": [{ type: NgInput },],
    "mediaQuery": [{ type: NgInput },],
    "size": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "platform": [{ type: NgInput },],
    "or": [{ type: NgInput },],
};
export class InfiniteScroll {
    constructor(el) {
        inputs(this, el, [threshold, disabled, position]);
        outputs(this, [ionInfinite]);
    }
}
InfiniteScroll.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-infinite-scroll' },] },
];
/** @nocollapse */
InfiniteScroll.ctorParameters = () => [
    { type: ElementRef, },
];
InfiniteScroll.propDecorators = {
    "threshold": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "position": [{ type: NgInput },],
    "ionInfinite": [{ type: NgOutput },],
};
export class InfiniteScrollContent {
    constructor(el) {
        inputs(this, el, [loadingSpinner, loadingText]);
    }
}
InfiniteScrollContent.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-infinite-scroll-content' },] },
];
/** @nocollapse */
InfiniteScrollContent.ctorParameters = () => [
    { type: ElementRef, },
];
InfiniteScrollContent.propDecorators = {
    "loadingSpinner": [{ type: NgInput },],
    "loadingText": [{ type: NgInput },],
};
export class Input {
    constructor(el) {
        inputs(this, el, [accept, autocapitalize, autocomplete, autocorrect, autofocus, checked, clearInput, clearOnEdit, debounce, disabled, inputmode, max, maxlength, min, minlength, multiple, name, pattern, placeholder, readonly, required, results, spellcheck, step, size, type, value]);
        outputs(this, [ionInput, ionStyle, ionBlur, ionFocus, ionInputDidLoad, ionInputDidUnload]);
    }
}
Input.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-input' },] },
];
/** @nocollapse */
Input.ctorParameters = () => [
    { type: ElementRef, },
];
Input.propDecorators = {
    "accept": [{ type: NgInput },],
    "autocapitalize": [{ type: NgInput },],
    "autocomplete": [{ type: NgInput },],
    "autocorrect": [{ type: NgInput },],
    "autofocus": [{ type: NgInput },],
    "checked": [{ type: NgInput },],
    "clearInput": [{ type: NgInput },],
    "clearOnEdit": [{ type: NgInput },],
    "debounce": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "inputmode": [{ type: NgInput },],
    "max": [{ type: NgInput },],
    "maxlength": [{ type: NgInput },],
    "min": [{ type: NgInput },],
    "minlength": [{ type: NgInput },],
    "multiple": [{ type: NgInput },],
    "name": [{ type: NgInput },],
    "pattern": [{ type: NgInput },],
    "placeholder": [{ type: NgInput },],
    "readonly": [{ type: NgInput },],
    "required": [{ type: NgInput },],
    "results": [{ type: NgInput },],
    "spellcheck": [{ type: NgInput },],
    "step": [{ type: NgInput },],
    "size": [{ type: NgInput },],
    "type": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionInput": [{ type: NgOutput },],
    "ionStyle": [{ type: NgOutput },],
    "ionBlur": [{ type: NgOutput },],
    "ionFocus": [{ type: NgOutput },],
    "ionInputDidLoad": [{ type: NgOutput },],
    "ionInputDidUnload": [{ type: NgOutput },],
};
export class Item {
    constructor(el) {
        inputs(this, el, [color, mode, detail, disabled, href, button, goBack]);
    }
}
Item.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-item' },] },
];
/** @nocollapse */
Item.ctorParameters = () => [
    { type: ElementRef, },
];
Item.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "detail": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "href": [{ type: NgInput },],
    "button": [{ type: NgInput },],
    "goBack": [{ type: NgInput },],
};
export class ItemDivider {
    constructor(el) {
        inputs(this, el, [color, mode]);
    }
}
ItemDivider.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-item-divider' },] },
];
/** @nocollapse */
ItemDivider.ctorParameters = () => [
    { type: ElementRef, },
];
ItemDivider.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
};
export class ItemGroup {
}
ItemGroup.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-item-group' },] },
];
/** @nocollapse */
ItemGroup.ctorParameters = () => [];
export class ItemOption {
    constructor(el) {
        inputs(this, el, [color, mode, disabled, expandable, href]);
    }
}
ItemOption.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-item-option' },] },
];
/** @nocollapse */
ItemOption.ctorParameters = () => [
    { type: ElementRef, },
];
ItemOption.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "expandable": [{ type: NgInput },],
    "href": [{ type: NgInput },],
};
export class ItemOptions {
    constructor(el) {
        inputs(this, el, [side]);
        outputs(this, [ionSwipe]);
    }
}
ItemOptions.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-item-options' },] },
];
/** @nocollapse */
ItemOptions.ctorParameters = () => [
    { type: ElementRef, },
];
ItemOptions.propDecorators = {
    "side": [{ type: NgInput },],
    "ionSwipe": [{ type: NgOutput },],
};
export class ItemSliding {
    constructor() {
        outputs(this, [ionDrag]);
    }
}
ItemSliding.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-item-sliding' },] },
];
/** @nocollapse */
ItemSliding.ctorParameters = () => [];
ItemSliding.propDecorators = {
    "ionDrag": [{ type: NgOutput },],
};
export class Label {
    constructor(el) {
        inputs(this, el, [color, mode, fixed, floating, stacked]);
        outputs(this, [ionStyle]);
    }
}
Label.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-label' },] },
];
/** @nocollapse */
Label.ctorParameters = () => [
    { type: ElementRef, },
];
Label.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "fixed": [{ type: NgInput },],
    "floating": [{ type: NgInput },],
    "stacked": [{ type: NgInput },],
    "ionStyle": [{ type: NgOutput },],
};
export class List {
}
List.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-list' },] },
];
/** @nocollapse */
List.ctorParameters = () => [];
export class ListHeader {
    constructor(el) {
        inputs(this, el, [color, mode]);
    }
}
ListHeader.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-list-header' },] },
];
/** @nocollapse */
ListHeader.ctorParameters = () => [
    { type: ElementRef, },
];
ListHeader.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
};
export class Menu {
    constructor(el) {
        inputs(this, el, [contentId, menuId, type, disabled, side, swipeEnabled, persistent, maxEdgeStart]);
        outputs(this, [ionOpen, ionClose, ionMenuChange]);
    }
}
Menu.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-menu' },] },
];
/** @nocollapse */
Menu.ctorParameters = () => [
    { type: ElementRef, },
];
Menu.propDecorators = {
    "contentId": [{ type: NgInput },],
    "menuId": [{ type: NgInput },],
    "type": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "side": [{ type: NgInput },],
    "swipeEnabled": [{ type: NgInput },],
    "persistent": [{ type: NgInput },],
    "maxEdgeStart": [{ type: NgInput },],
    "ionOpen": [{ type: NgOutput },],
    "ionClose": [{ type: NgOutput },],
    "ionMenuChange": [{ type: NgOutput },],
};
export class MenuButton {
    constructor(el) {
        inputs(this, el, [menu, autoHide]);
    }
}
MenuButton.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-menu-button' },] },
];
/** @nocollapse */
MenuButton.ctorParameters = () => [
    { type: ElementRef, },
];
MenuButton.propDecorators = {
    "menu": [{ type: NgInput },],
    "autoHide": [{ type: NgInput },],
};
export class MenuToggle {
    constructor(el) {
        inputs(this, el, [menu, autoHide]);
    }
}
MenuToggle.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-menu-toggle' },] },
];
/** @nocollapse */
MenuToggle.ctorParameters = () => [
    { type: ElementRef, },
];
MenuToggle.propDecorators = {
    "menu": [{ type: NgInput },],
    "autoHide": [{ type: NgInput },],
};
export class Nav {
    constructor(el) {
        inputs(this, el, [swipeBackEnabled, animated, delegate, rootParams, root]);
        outputs(this, [ionNavWillChange, ionNavDidChange]);
    }
}
Nav.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-nav' },] },
];
/** @nocollapse */
Nav.ctorParameters = () => [
    { type: ElementRef, },
];
Nav.propDecorators = {
    "swipeBackEnabled": [{ type: NgInput },],
    "animated": [{ type: NgInput },],
    "delegate": [{ type: NgInput },],
    "rootParams": [{ type: NgInput },],
    "root": [{ type: NgInput },],
    "ionNavWillChange": [{ type: NgOutput },],
    "ionNavDidChange": [{ type: NgOutput },],
};
export class NavPop {
}
NavPop.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-nav-pop' },] },
];
/** @nocollapse */
NavPop.ctorParameters = () => [];
export class NavPush {
    constructor(el) {
        inputs(this, el, [component, componentProps, url]);
    }
}
NavPush.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-nav-push' },] },
];
/** @nocollapse */
NavPush.ctorParameters = () => [
    { type: ElementRef, },
];
NavPush.propDecorators = {
    "component": [{ type: NgInput },],
    "componentProps": [{ type: NgInput },],
    "url": [{ type: NgInput },],
};
export class NavSetRoot {
    constructor(el) {
        inputs(this, el, [component, componentProps, url]);
    }
}
NavSetRoot.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-nav-set-root' },] },
];
/** @nocollapse */
NavSetRoot.ctorParameters = () => [
    { type: ElementRef, },
];
NavSetRoot.propDecorators = {
    "component": [{ type: NgInput },],
    "componentProps": [{ type: NgInput },],
    "url": [{ type: NgInput },],
};
export class Note {
    constructor(el) {
        inputs(this, el, [color, mode]);
    }
}
Note.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-note' },] },
];
/** @nocollapse */
Note.ctorParameters = () => [
    { type: ElementRef, },
];
Note.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
};
export class Radio {
    constructor(el) {
        inputs(this, el, [color, mode, name, disabled, checked, value]);
        outputs(this, [ionRadioDidLoad, ionRadioDidUnload, ionStyle, ionSelect, ionFocus, ionBlur]);
    }
}
Radio.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-radio' },] },
];
/** @nocollapse */
Radio.ctorParameters = () => [
    { type: ElementRef, },
];
Radio.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "name": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "checked": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionRadioDidLoad": [{ type: NgOutput },],
    "ionRadioDidUnload": [{ type: NgOutput },],
    "ionStyle": [{ type: NgOutput },],
    "ionSelect": [{ type: NgOutput },],
    "ionFocus": [{ type: NgOutput },],
    "ionBlur": [{ type: NgOutput },],
};
export class RadioGroup {
    constructor(el) {
        inputs(this, el, [allowEmptySelection, disabled, name, value]);
        outputs(this, [ionChange]);
    }
}
RadioGroup.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-radio-group' },] },
];
/** @nocollapse */
RadioGroup.ctorParameters = () => [
    { type: ElementRef, },
];
RadioGroup.propDecorators = {
    "allowEmptySelection": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "name": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionChange": [{ type: NgOutput },],
};
export class Range {
    constructor(el) {
        inputs(this, el, [color, mode, debounce, disabled, dualKnobs, max, min, pin, snaps, step, value]);
        outputs(this, [ionChange, ionStyle, ionFocus, ionBlur]);
    }
}
Range.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-range' },] },
];
/** @nocollapse */
Range.ctorParameters = () => [
    { type: ElementRef, },
];
Range.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "debounce": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "dualKnobs": [{ type: NgInput },],
    "max": [{ type: NgInput },],
    "min": [{ type: NgInput },],
    "pin": [{ type: NgInput },],
    "snaps": [{ type: NgInput },],
    "step": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionChange": [{ type: NgOutput },],
    "ionStyle": [{ type: NgOutput },],
    "ionFocus": [{ type: NgOutput },],
    "ionBlur": [{ type: NgOutput },],
};
export class Refresher {
    constructor(el) {
        inputs(this, el, [pullMin, pullMax, closeDuration, snapbackDuration, disabled]);
        outputs(this, [ionRefresh, ionPull, ionStart]);
    }
}
Refresher.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-refresher' },] },
];
/** @nocollapse */
Refresher.ctorParameters = () => [
    { type: ElementRef, },
];
Refresher.propDecorators = {
    "pullMin": [{ type: NgInput },],
    "pullMax": [{ type: NgInput },],
    "closeDuration": [{ type: NgInput },],
    "snapbackDuration": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "ionRefresh": [{ type: NgOutput },],
    "ionPull": [{ type: NgOutput },],
    "ionStart": [{ type: NgOutput },],
};
export class RefresherContent {
    constructor(el) {
        inputs(this, el, [pullingIcon, pullingText, refreshingSpinner, refreshingText]);
    }
}
RefresherContent.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-refresher-content' },] },
];
/** @nocollapse */
RefresherContent.ctorParameters = () => [
    { type: ElementRef, },
];
RefresherContent.propDecorators = {
    "pullingIcon": [{ type: NgInput },],
    "pullingText": [{ type: NgInput },],
    "refreshingSpinner": [{ type: NgInput },],
    "refreshingText": [{ type: NgInput },],
};
export class Reorder {
}
Reorder.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-reorder' },] },
];
/** @nocollapse */
Reorder.ctorParameters = () => [];
export class ReorderGroup {
    constructor(el) {
        inputs(this, el, [disabled]);
    }
}
ReorderGroup.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-reorder-group' },] },
];
/** @nocollapse */
ReorderGroup.ctorParameters = () => [
    { type: ElementRef, },
];
ReorderGroup.propDecorators = {
    "disabled": [{ type: NgInput },],
};
export class RippleEffect {
    constructor(el) {
        inputs(this, el, [useTapClick]);
    }
}
RippleEffect.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-ripple-effect' },] },
];
/** @nocollapse */
RippleEffect.ctorParameters = () => [
    { type: ElementRef, },
];
RippleEffect.propDecorators = {
    "useTapClick": [{ type: NgInput },],
};
export class Row {
}
Row.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-row' },] },
];
/** @nocollapse */
Row.ctorParameters = () => [];
export class Scroll {
    constructor(el) {
        inputs(this, el, [mode, forceOverscroll, scrollEvents]);
        outputs(this, [ionScrollStart, ionScroll, ionScrollEnd]);
    }
}
Scroll.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-scroll' },] },
];
/** @nocollapse */
Scroll.ctorParameters = () => [
    { type: ElementRef, },
];
Scroll.propDecorators = {
    "mode": [{ type: NgInput },],
    "forceOverscroll": [{ type: NgInput },],
    "scrollEvents": [{ type: NgInput },],
    "ionScrollStart": [{ type: NgOutput },],
    "ionScroll": [{ type: NgOutput },],
    "ionScrollEnd": [{ type: NgOutput },],
};
export class Searchbar {
    constructor(el) {
        inputs(this, el, [color, mode, animated, autocomplete, autocorrect, cancelButtonText, debounce, placeholder, showCancelButton, spellcheck, type, value]);
        outputs(this, [ionInput, ionCancel, ionClear, ionBlur, ionFocus]);
    }
}
Searchbar.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-searchbar' },] },
];
/** @nocollapse */
Searchbar.ctorParameters = () => [
    { type: ElementRef, },
];
Searchbar.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "animated": [{ type: NgInput },],
    "autocomplete": [{ type: NgInput },],
    "autocorrect": [{ type: NgInput },],
    "cancelButtonText": [{ type: NgInput },],
    "debounce": [{ type: NgInput },],
    "placeholder": [{ type: NgInput },],
    "showCancelButton": [{ type: NgInput },],
    "spellcheck": [{ type: NgInput },],
    "type": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionInput": [{ type: NgOutput },],
    "ionCancel": [{ type: NgOutput },],
    "ionClear": [{ type: NgOutput },],
    "ionBlur": [{ type: NgOutput },],
    "ionFocus": [{ type: NgOutput },],
};
export class Segment {
    constructor(el) {
        inputs(this, el, [color, mode, disabled, value]);
        outputs(this, [ionChange]);
    }
}
Segment.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-segment' },] },
];
/** @nocollapse */
Segment.ctorParameters = () => [
    { type: ElementRef, },
];
Segment.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionChange": [{ type: NgOutput },],
};
export class SegmentButton {
    constructor(el) {
        inputs(this, el, [activated, color, mode, checked, disabled, href, value]);
        outputs(this, [ionClick]);
    }
}
SegmentButton.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-segment-button' },] },
];
/** @nocollapse */
SegmentButton.ctorParameters = () => [
    { type: ElementRef, },
];
SegmentButton.propDecorators = {
    "activated": [{ type: NgInput },],
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "checked": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "href": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionClick": [{ type: NgOutput },],
};
export class Select {
    constructor(el) {
        inputs(this, el, [disabled, cancelText, okText, placeholder, name, selectedText, multiple, 'interface', interfaceOptions, value]);
        outputs(this, [ionChange, ionCancel, ionFocus, ionBlur, ionStyle]);
    }
}
Select.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-select' },] },
];
/** @nocollapse */
Select.ctorParameters = () => [
    { type: ElementRef, },
];
Select.propDecorators = {
    "disabled": [{ type: NgInput },],
    "cancelText": [{ type: NgInput },],
    "okText": [{ type: NgInput },],
    "placeholder": [{ type: NgInput },],
    "name": [{ type: NgInput },],
    "selectedText": [{ type: NgInput },],
    "multiple": [{ type: NgInput },],
    "interface": [{ type: NgInput },],
    "interfaceOptions": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionChange": [{ type: NgOutput },],
    "ionCancel": [{ type: NgOutput },],
    "ionFocus": [{ type: NgOutput },],
    "ionBlur": [{ type: NgOutput },],
    "ionStyle": [{ type: NgOutput },],
};
export class SelectOption {
    constructor(el) {
        inputs(this, el, [disabled, selected, value]);
        outputs(this, [ionSelectOptionDidLoad, ionSelectOptionDidUnload]);
    }
}
SelectOption.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-select-option' },] },
];
/** @nocollapse */
SelectOption.ctorParameters = () => [
    { type: ElementRef, },
];
SelectOption.propDecorators = {
    "disabled": [{ type: NgInput },],
    "selected": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionSelectOptionDidLoad": [{ type: NgOutput },],
    "ionSelectOptionDidUnload": [{ type: NgOutput },],
};
export class SelectPopover {
    constructor(el) {
        inputs(this, el, [header, subHeader, message, options]);
    }
}
SelectPopover.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-select-popover' },] },
];
/** @nocollapse */
SelectPopover.ctorParameters = () => [
    { type: ElementRef, },
];
SelectPopover.propDecorators = {
    "header": [{ type: NgInput },],
    "subHeader": [{ type: NgInput },],
    "message": [{ type: NgInput },],
    "options": [{ type: NgInput },],
};
export class ShowWhen {
    constructor(el) {
        inputs(this, el, [orientation, mediaQuery, size, mode, platform, or]);
    }
}
ShowWhen.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-show-when' },] },
];
/** @nocollapse */
ShowWhen.ctorParameters = () => [
    { type: ElementRef, },
];
ShowWhen.propDecorators = {
    "orientation": [{ type: NgInput },],
    "mediaQuery": [{ type: NgInput },],
    "size": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "platform": [{ type: NgInput },],
    "or": [{ type: NgInput },],
};
export class SkeletonText {
    constructor(el) {
        inputs(this, el, [width]);
    }
}
SkeletonText.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-skeleton-text' },] },
];
/** @nocollapse */
SkeletonText.ctorParameters = () => [
    { type: ElementRef, },
];
SkeletonText.propDecorators = {
    "width": [{ type: NgInput },],
};
export class Slide {
}
Slide.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-slide' },] },
];
/** @nocollapse */
Slide.ctorParameters = () => [];
export class Slides {
    constructor(el) {
        inputs(this, el, [options, pager]);
        outputs(this, [ionSlideWillChange, ionSlideDidChange, ionSlideNextStart, ionSlidePrevStart, ionSlideNextEnd, ionSlidePrevEnd, ionSlideTransitionStart, ionSlideTransitionEnd, ionSlideDrag, ionSlideReachStart, ionSlideReachEnd, ionSlideTouchStart, ionSlideTouchEnd]);
    }
}
Slides.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-slides' },] },
];
/** @nocollapse */
Slides.ctorParameters = () => [
    { type: ElementRef, },
];
Slides.propDecorators = {
    "options": [{ type: NgInput },],
    "pager": [{ type: NgInput },],
    "ionSlideWillChange": [{ type: NgOutput },],
    "ionSlideDidChange": [{ type: NgOutput },],
    "ionSlideNextStart": [{ type: NgOutput },],
    "ionSlidePrevStart": [{ type: NgOutput },],
    "ionSlideNextEnd": [{ type: NgOutput },],
    "ionSlidePrevEnd": [{ type: NgOutput },],
    "ionSlideTransitionStart": [{ type: NgOutput },],
    "ionSlideTransitionEnd": [{ type: NgOutput },],
    "ionSlideDrag": [{ type: NgOutput },],
    "ionSlideReachStart": [{ type: NgOutput },],
    "ionSlideReachEnd": [{ type: NgOutput },],
    "ionSlideTouchStart": [{ type: NgOutput },],
    "ionSlideTouchEnd": [{ type: NgOutput },],
};
export class Spinner {
    constructor(el) {
        inputs(this, el, [color, mode, duration, name, paused]);
    }
}
Spinner.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-spinner' },] },
];
/** @nocollapse */
Spinner.ctorParameters = () => [
    { type: ElementRef, },
];
Spinner.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "duration": [{ type: NgInput },],
    "name": [{ type: NgInput },],
    "paused": [{ type: NgInput },],
};
export class SplitPane {
    constructor(el) {
        inputs(this, el, [disabled, when]);
        outputs(this, [ionChange, ionSplitPaneVisible]);
    }
}
SplitPane.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-split-pane' },] },
];
/** @nocollapse */
SplitPane.ctorParameters = () => [
    { type: ElementRef, },
];
SplitPane.propDecorators = {
    "disabled": [{ type: NgInput },],
    "when": [{ type: NgInput },],
    "ionChange": [{ type: NgOutput },],
    "ionSplitPaneVisible": [{ type: NgOutput },],
};
export class Tab {
    constructor(el) {
        inputs(this, el, [active, btnId, delegate, tabTitle, href, tabIcon, tabBadge, tabBadgeStyle, component, name, disabled, selected, show, tabsHideOnSubPages]);
        outputs(this, [ionSelect]);
    }
}
Tab.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-tab' },] },
];
/** @nocollapse */
Tab.ctorParameters = () => [
    { type: ElementRef, },
];
Tab.propDecorators = {
    "active": [{ type: NgInput },],
    "btnId": [{ type: NgInput },],
    "delegate": [{ type: NgInput },],
    "tabTitle": [{ type: NgInput },],
    "href": [{ type: NgInput },],
    "tabIcon": [{ type: NgInput },],
    "tabBadge": [{ type: NgInput },],
    "tabBadgeStyle": [{ type: NgInput },],
    "component": [{ type: NgInput },],
    "name": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "selected": [{ type: NgInput },],
    "show": [{ type: NgInput },],
    "tabsHideOnSubPages": [{ type: NgInput },],
    "ionSelect": [{ type: NgOutput },],
};
export class Tabs {
    constructor(el) {
        inputs(this, el, [color, name, tabbarHidden, tabbarLayout, tabbarPlacement, tabbarHighlight, translucent, scrollable, useRouter]);
        outputs(this, [ionChange, ionNavWillChange, ionNavDidChange]);
    }
}
Tabs.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-tabs' },] },
];
/** @nocollapse */
Tabs.ctorParameters = () => [
    { type: ElementRef, },
];
Tabs.propDecorators = {
    "color": [{ type: NgInput },],
    "name": [{ type: NgInput },],
    "tabbarHidden": [{ type: NgInput },],
    "tabbarLayout": [{ type: NgInput },],
    "tabbarPlacement": [{ type: NgInput },],
    "tabbarHighlight": [{ type: NgInput },],
    "translucent": [{ type: NgInput },],
    "scrollable": [{ type: NgInput },],
    "useRouter": [{ type: NgInput },],
    "ionChange": [{ type: NgOutput },],
    "ionNavWillChange": [{ type: NgOutput },],
    "ionNavDidChange": [{ type: NgOutput },],
};
export class Text {
    constructor(el) {
        inputs(this, el, [color, mode]);
    }
}
Text.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-text' },] },
];
/** @nocollapse */
Text.ctorParameters = () => [
    { type: ElementRef, },
];
Text.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
};
export class Textarea {
    constructor(el) {
        inputs(this, el, [autocapitalize, autocomplete, autofocus, clearOnEdit, debounce, disabled, maxlength, minlength, name, placeholder, readonly, required, spellcheck, cols, rows, wrap, value]);
        outputs(this, [ionInput, ionStyle, ionBlur, ionFocus]);
    }
}
Textarea.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-textarea' },] },
];
/** @nocollapse */
Textarea.ctorParameters = () => [
    { type: ElementRef, },
];
Textarea.propDecorators = {
    "autocapitalize": [{ type: NgInput },],
    "autocomplete": [{ type: NgInput },],
    "autofocus": [{ type: NgInput },],
    "clearOnEdit": [{ type: NgInput },],
    "debounce": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "maxlength": [{ type: NgInput },],
    "minlength": [{ type: NgInput },],
    "name": [{ type: NgInput },],
    "placeholder": [{ type: NgInput },],
    "readonly": [{ type: NgInput },],
    "required": [{ type: NgInput },],
    "spellcheck": [{ type: NgInput },],
    "cols": [{ type: NgInput },],
    "rows": [{ type: NgInput },],
    "wrap": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionInput": [{ type: NgOutput },],
    "ionStyle": [{ type: NgOutput },],
    "ionBlur": [{ type: NgOutput },],
    "ionFocus": [{ type: NgOutput },],
};
export class Thumbnail {
}
Thumbnail.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-thumbnail' },] },
];
/** @nocollapse */
Thumbnail.ctorParameters = () => [];
export class Toggle {
    constructor(el) {
        inputs(this, el, [color, mode, name, checked, disabled, value]);
        outputs(this, [ionChange, ionFocus, ionBlur, ionStyle]);
    }
}
Toggle.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-toggle' },] },
];
/** @nocollapse */
Toggle.ctorParameters = () => [
    { type: ElementRef, },
];
Toggle.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "name": [{ type: NgInput },],
    "checked": [{ type: NgInput },],
    "disabled": [{ type: NgInput },],
    "value": [{ type: NgInput },],
    "ionChange": [{ type: NgOutput },],
    "ionFocus": [{ type: NgOutput },],
    "ionBlur": [{ type: NgOutput },],
    "ionStyle": [{ type: NgOutput },],
};
export class Toolbar {
    constructor(el) {
        inputs(this, el, [color, mode, translucent]);
    }
}
Toolbar.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-toolbar' },] },
];
/** @nocollapse */
Toolbar.ctorParameters = () => [
    { type: ElementRef, },
];
Toolbar.propDecorators = {
    "color": [{ type: NgInput },],
    "mode": [{ type: NgInput },],
    "translucent": [{ type: NgInput },],
};
export class ToolbarTitle {
}
ToolbarTitle.decorators = [
    { type: NgDirective, args: [{ selector: 'ion-title' },] },
];
/** @nocollapse */
ToolbarTitle.ctorParameters = () => [];
