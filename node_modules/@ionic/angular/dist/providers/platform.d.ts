import { PlatformConfig } from '@ionic/core';
export declare type DocumentDirection = 'ltr' | 'rtl';
export declare class Platform {
    _element: HTMLIonPlatformElement;
    constructor();
    is(platformName: string): boolean;
    isAsync(platformName: string): Promise<boolean>;
    platforms(): string[];
    platformsAsync(): Promise<string[]>;
    versions(): PlatformConfig[];
    versionsAsync(): Promise<PlatformConfig[]>;
    ready(): Promise<any>;
    readonly isRTL: boolean;
    setDir(_dir: DocumentDirection, updateDocument: boolean): void;
    /**
     * Returns app's language direction.
     * We recommend the app's `index.html` file already has the correct `dir`
     * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
     * @returns {DocumentDirection}
     */
    dir(): DocumentDirection;
    /**
     * Set the app's language and optionally the country code, which will update
     * the `lang` attribute on the app's root `<html>` element.
     * We recommend the app's `index.html` file already has the correct `lang`
     * attribute value set, such as `<html lang="en">`. This method is useful if
     * the language needs to be dynamically changed per user/session.
     * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
     * @param {string} language  Examples: `en-US`, `en-GB`, `ar`, `de`, `zh`, `es-MX`
     * @param {boolean} updateDocument  Specifies whether the `lang` attribute of `<html>` should be updated
     */
    setLang(language: string, updateDocument: boolean): void;
    /**
     * Returns app's language and optional country code.
     * We recommend the app's `index.html` file already has the correct `lang`
     * attribute value set, such as `<html lang="en">`.
     * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
     * @returns {string}
     */
    lang(): string;
    /**
     * Get the query string parameter
     */
    getQueryParam(key: string): string;
    /**
     * Get the query string parameter
     */
    getQueryParamAsync(key: string): Promise<string>;
    height(): number;
    isLandscape(): boolean;
    isPortrait(): boolean;
    testUserAgent(expression: string): boolean;
    url(): string;
    width(): number;
}
export declare function isImpl(platform: Platform, platformName: string): boolean;
export declare function isAsyncImpl(platform: Platform, platformName: string): Promise<boolean>;
export declare function platformsImpl(platform: Platform): string[];
export declare function platformsAsyncImpl(platform: Platform): Promise<string[]>;
export declare function versionsImpl(platform: Platform): PlatformConfig[];
export declare function versionsAsyncImpl(platform: Platform): Promise<PlatformConfig[]>;
export declare function readyImpl(platform: Platform): Promise<any>;
export declare function getQueryParamImpl(platform: Platform, key: string): string;
export declare function getQueryParamAsyncImpl(platform: Platform, key: string): Promise<string>;
export declare function initialize(platform: Platform): void;
export declare function getHydratedPlatform(platform: Platform): Promise<HTMLIonPlatformElement>;
