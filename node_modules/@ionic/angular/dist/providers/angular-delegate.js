import { ApplicationRef, Injectable, Injector, } from '@angular/core';
export class AngularDelegate {
    constructor(appRef) {
        this.appRef = appRef;
    }
    create(cfr, injector) {
        return new AngularFrameworkDelegate(cfr, injector, this.appRef);
    }
}
AngularDelegate.decorators = [
    { type: Injectable },
];
/** @nocollapse */
AngularDelegate.ctorParameters = () => [
    { type: ApplicationRef, },
];
export class AngularFrameworkDelegate {
    constructor(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
        this.elRefMap = new WeakMap();
    }
    attachViewToDom(container, component, data, cssClasses) {
        const componentFactory = this.cfr.resolveComponentFactory(component);
        const hostElement = document.createElement(componentFactory.selector);
        if (data) {
            Object.assign(hostElement, data);
        }
        const childInjector = Injector.create([], this.injector);
        const componentRef = componentFactory.create(childInjector, [], hostElement);
        for (const clazz of cssClasses) {
            hostElement.classList.add(clazz);
        }
        bindLifecycleEvents(componentRef.instance, hostElement);
        container.appendChild(hostElement);
        this.appRef.attachView(componentRef.hostView);
        this.elRefMap.set(hostElement, componentRef);
        return Promise.resolve(hostElement);
    }
    removeViewFromDom(_container, component) {
        const componentRef = this.elRefMap.get(component);
        if (componentRef) {
            componentRef.destroy();
            this.elRefMap.delete(component);
        }
        return Promise.resolve();
    }
}
const LIFECYCLES = [
    "ionViewWillEnter" /* WillEnter */,
    "ionViewDidEnter" /* DidEnter */,
    "ionViewWillLeave" /* WillLeave */,
    "ionViewDidLeave" /* DidLeave */,
    "ionViewWillUnload" /* WillUnload */
];
export function bindLifecycleEvents(instance, element) {
    LIFECYCLES.forEach(eventName => {
        element.addEventListener(eventName, (ev) => {
            if (typeof instance[eventName] === 'function') {
                instance[eventName](ev.detail);
            }
        });
    });
}
