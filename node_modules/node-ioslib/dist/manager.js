"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const afc_1 = require("./client/afc");
const debugserver_1 = require("./client/debugserver");
const installation_proxy_1 = require("./client/installation_proxy");
const lockdownd_1 = require("./client/lockdownd");
const mobile_image_mounter_1 = require("./client/mobile_image_mounter");
const usbmuxd_1 = require("./client/usbmuxd");
class ClientManager {
    constructor(pairRecord, device, lockdowndClient) {
        this.pairRecord = pairRecord;
        this.device = device;
        this.lockdowndClient = lockdowndClient;
        this.connections = [lockdowndClient.socket];
    }
    static async create(udid) {
        const usbmuxClient = new usbmuxd_1.UsbmuxdClient(usbmuxd_1.UsbmuxdClient.connectUsbmuxdSocket());
        const device = await usbmuxClient.getDevice(udid);
        const pairRecord = await usbmuxClient.readPairRecord(device.Properties.SerialNumber);
        const lockdownSocket = await usbmuxClient.connect(device, 62078);
        const lockdownClient = new lockdownd_1.LockdowndClient(lockdownSocket);
        await lockdownClient.doHandshake(pairRecord);
        return new ClientManager(pairRecord, device, lockdownClient);
    }
    async getUsbmuxdClient() {
        const usbmuxClient = new usbmuxd_1.UsbmuxdClient(usbmuxd_1.UsbmuxdClient.connectUsbmuxdSocket());
        this.connections.push(usbmuxClient.socket);
        return usbmuxClient;
    }
    async getLockdowndClient() {
        const usbmuxClient = new usbmuxd_1.UsbmuxdClient(usbmuxd_1.UsbmuxdClient.connectUsbmuxdSocket());
        const lockdownSocket = await usbmuxClient.connect(this.device, 62078);
        const lockdownClient = new lockdownd_1.LockdowndClient(lockdownSocket);
        this.connections.push(lockdownClient.socket);
        return lockdownClient;
    }
    async getLockdowndClientWithHandshake() {
        const lockdownClient = await this.getLockdowndClient();
        await lockdownClient.doHandshake(this.pairRecord);
        return lockdownClient;
    }
    async getAFCClient() {
        return this.getServiceClient("com.apple.afc", afc_1.AFCClient);
    }
    async getInstallationProxyClient() {
        return this.getServiceClient("com.apple.mobile.installation_proxy", installation_proxy_1.InstallationProxyClient);
    }
    async getMobileImageMounterClient() {
        return this.getServiceClient("com.apple.mobile.mobile_image_mounter", mobile_image_mounter_1.MobileImageMounterClient);
    }
    async getDebugserverClient() {
        return this.getServiceClient("com.apple.debugserver", debugserver_1.DebugserverClient);
    }
    async getServiceClient(name, ServiceType) {
        const servicePort = await this.lockdowndClient.startService(name);
        const usbmuxClient = new usbmuxd_1.UsbmuxdClient(usbmuxd_1.UsbmuxdClient.connectUsbmuxdSocket());
        const socket = await usbmuxClient.connect(this.device, servicePort);
        const client = new ServiceType(socket);
        this.connections.push(client.socket);
        return client;
    }
    end() {
        for (let socket of this.connections) {
            // may already be closed
            try {
                socket.end();
            }
            catch (err) { }
        }
    }
}
exports.ClientManager = ClientManager;
